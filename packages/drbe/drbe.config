// vim: syntax=javascript
var packageInfo = require("../../package.json");
var path = require('path');

exports.config = function(sessionKey, stdio, argv) {


  var options = stdio.getopt({
    'geoloc': {key:'geoloc', args: 1,  description: 'The mounting point of this DRBE instance'},
    'log': {key:'log', description: 'Log flag. Include to enable.'},
    'logfile': {key:'l', args: 1, mandatory: false, description: 'Path to the logfile (*.log)'},
    'storefile': {key:'s', args: 1, mandatory: false, description: 'Path to the storefile (*.store.log)'},
    'store': {key:'store', description: 'Storage flag. Include to enable.'},
    'persistent': {key:'persistent', description:'Is this instance persistent? If yes, a command event node will be created'},
    'rulesfile': {key:'r', args: 1, mandatory: false, description: 'Path to the rules file (*.nools)'},
    'type': {key:'t', args: 1, mandatory: true, description: 'DRBE instance type definition: infrastructure, personal, open'},
    'udp': {key:'udp', args: 2, description: 'UDP credentials -- host, port'},
    'xmpp': {key:'xmpp', args: 2, mandatory: true, description: 'XMPP credentials: jid, pass'}
  });

  var config = {
    appVersion: packageInfo.version, // Semantic versioning standard -- http://semver.org/
    hueUUID: "3909b2177ae707f2b4ce007281408f",
    initFile: "",
    logfile: path.join(__dirname, options.logfile || '../drbe/logs/DRBE-Session-'+sessionKey+'.log'),
    storefile: path.join(__dirname, options.storefile || '../drbe/store/DRBE-Session-'+sessionKey+'.store.log'),
    loggingEnabled: options.log || false,
    storageEnabled: options.store || true,
    meta: {
      type: options.type || "infrastructure",
      geoloc: options.geoloc || "root",  
      persistent: options.persistent || false
    },
    rulesfile: options.rulesfile || "/rules.js",
    sessionKey: sessionKey,
    subscribe: {
      jid: "ruleengine@192.168.1.108",
      node: "craigsnode1",
      to: "pubsub.192.168.1.108"
    },
    udpcred: {
        host: function(){
          return (options.udp)? options.udp[0] : false;
        },
        port: function(){
          return (options.udp)? options.udp[1] : false;
        }
    },
    clients: {
      bimLocal: {
        name: "bimsurfer",
        description: "visualization",
        datatype: "application/json",
        location: "bim@192.168.1.108",
        method: "xmpp-chat",
        active: false,
        makePacket : function(payload){
          return payload;
        }
      },
      bimRemote: {
        name: "bimsurfer",
        description: "visualization",
        datatype: "application/json",
        location: "billyli16@sensor.andrew.cmu.edu",
        method: "xmpp",
        active: true,
        makePacket : function(payload){
          return payload; 
        } 
      },
      twisthouse:{
        name: "twisthouse",
        description: "visualization",
        datatype: "application/x-www-form-urlencoded",
        location: "http://ape.twisthouse.ddns.net:6969/",
        method: "http",
        active: true,
        makePacket : function(payload){
           return "[{\"cmd\":\"inlinepush\",\"params\":{\"password\":\"testpasswd\",\"raw\":\"postmsg\",\"channel\":\"testchannel\",\"data\":{\"message\":"+payload+"}}}]"; 
        }
      }
    },
    xmppUser: options.xmpp[0]|| "boschpit_drbe",
    xmppDomain: options.xmpp[1] || "sensor.andrew.cmu.edu",
    xmppPass: options.xmpp[2] || "boschsc15",
  };
  
  return config;

};
